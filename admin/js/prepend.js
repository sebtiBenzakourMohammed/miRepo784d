'use strict';const dotclear={msg:{},};dotclear.storeLocalData=(id,value=null)=>{localStorage.setItem(id,JSON.stringify(value));};dotclear.dropLocalData=(id)=>{localStorage.removeItem(id);};dotclear.readLocalData=(id)=>{let info=localStorage.getItem(id);if(info!==null){return JSON.parse(info);}
return info;};dotclear.getData=(id,clear=true,remove=false)=>{let data={};const element=document.getElementById(`${id}-data`);if(element){try{data=JSON.parse(element.textContent);if(remove){element.remove();}else if(clear){element.innerHTML='';}}catch(e){}}
return data;};dotclear.isObject=(item)=>item&&typeof item==='object'&&!Array.isArray(item);dotclear.mergeDeep=(target,...sources)=>{if(!sources.length)return target;const source=sources.shift();if(dotclear.isObject(target)&&dotclear.isObject(source)){for(const key in source){if(dotclear.isObject(source[key])){if(!target[key])
Object.assign(target,{[key]:{},});dotclear.mergeDeep(target[key],source[key]);}else{Object.assign(target,{[key]:source[key],});}}}
return dotclear.mergeDeep(target,...sources);};dotclear.trimHtml=(html,options={})=>{let limit=options.limit||100;let preserveTags=typeof options.preserveTags!=='undefined'?options.preserveTags:true;let wordBreak=typeof options.wordBreak!=='undefined'?options.wordBreak:false;let suffix=options.suffix||'...';let moreLink=options.moreLink||'';let arr=html.replace(/</g,'\n<').replace(/>/g,'>\n').replace(/\n\n/g,'\n').replace(/^\n/g,'').replace(/\n$/g,'').split('\n');let sum=0;let row;let cut;let add;let tagMatch;let tagName;let tagStack=[];let more=false;let rowCut;for(let i=0;i<arr.length;i++){row=arr[i];rowCut=row.replace(/[ ]+/g,' ');if(!row.length){continue;}
if(row[0]!=='<'){if(sum>=limit){row='';}else if(sum+rowCut.length>=limit){cut=limit-sum;if(row[cut-1]===' '){while(cut){cut-=1;if(row[cut-1]!==' '){break;}}}else{add=row.substring(cut).split('').indexOf(' ');if(!wordBreak){if(add!==-1){cut+=add;}else{cut=row.length;}}}
row=row.substring(0,cut)+suffix;if(moreLink){row+=`<a href="${moreLink}" style="display:inline">Â»</a>`;}
sum=limit;more=true;}else{sum+=rowCut.length;}}else if(!preserveTags){row='';}else if(sum>=limit){tagMatch=row.match(/[a-zA-Z]+/);tagName=tagMatch?tagMatch[0]:'';if(tagName){if(row.substring(0,2)!=='</'){tagStack.push(tagName);row='';}else{while(tagStack[tagStack.length-1]!==tagName&&tagStack.length){tagStack.pop();}
if(tagStack.length){row='';}
tagStack.pop();}}else{row='';}}
arr[i]=row;}
return{html:arr.join('\n').replace(/\n/g,''),more,};};const storeLocalData=(id,value=null)=>{console.warn('Dotclear: storeLocalData() is deprecated. Use dotclear.storeLocalData().');dotclear.storeLocalData(id,value);};const dropLocalData=(id)=>{console.warn('Dotclear: dropLocalData() is deprecated. Use dotclear.dropLocalData().');dotclear.dropLocalData(id);};const readLocalData=(id)=>{console.warn('Dotclear: readLocalData() is deprecated. Use dotclear.readLocalData().');return dotclear.readLocalData(id);};const getData=(id,clear=true,remove=false)=>{console.warn('Dotclear: getData() is deprecated. Use dotclear.getData().');return dotclear.getData(id,clear,remove);};const isObject=(item)=>{console.warn('Dotclear: isObject() is deprecated. Use dotclear.isObject().');return dotclear.isObject(item);};const mergeDeep=(target,...sources)=>{console.warn('Dotclear: mergeDeep() is deprecated. Use dotclear.mergeDeep().');return dotclear.mergeDeep(target,...sources);};